AWSTemplateFormatVersion: '2010-09-09'

# Prerequisites: Have your GitHub access token in Secrets Manager with name dev/github/token and key GitHubAccessToken

Description: CodePipeline with Secrets Manager

Parameters:

  CodeBuildEnvironment:
    Type: String
    Description: CodeBuild environment size
    Default: BUILD_GENERAL1_SMALL
    # https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html
    AllowedValues:
      - BUILD_GENERAL1_SMALL
      - BUILD_GENERAL1_MEDIUM
      - BUILD_GENERAL1_LARGE

  GitHubOwner:
    Type: String
    Description: GitHub owner or user
    Default: malliina
    MinLength: 1
    MaxLength: 256
    AllowedPattern: '[a-zA-Z0-9][-a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.

  GitHubRepository:
    Type: String
    Description: GitHub repository
    Default: cfn-lambda
    MinLength: 1
    MaxLength: 256
    AllowedPattern: '[a-zA-Z0-9][-a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.

  Branch:
    Type: String
    Description: GitHub branch to build
    MinLength: 1
    MaxLength: 256
    Default: master

  BuildSpec:
    Type: String
    Description: Path to build spec file relative to repo root
    MinLength: 1
    MaxLength: 1024
    Default: buildspec.yml

  LambdaConfiguration:
    Type: String
    Description: Path to Lambda template configuration file
    MinLength: 1
    MaxLength: 1024
    Default: lambda-configuration.json

  InputTemplate:
    Type: String
    Description: Input SAM template
    MinLength: 1
    Default: input.cfn.yml
    AllowedValues:
      - input-scheduled.cfn.yml
      - input-s3.cfn.yml

  OutputTemplate:
    Type: String
    Description: Output template produced by build
    MinLength: 1
    Default: output.cfn.yml

  GitHubWebhookSecret:
    NoEcho: true
    Type: String
    Description: Optional GitHub webhook secret
    MinLength: 0
    MaxLength: 256
    Default: ""

  KmsKeyAdmin:
    Type: String
    Description: Optional - KMS key administrator ARN

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Source
      Parameters:
        - GitHubOwner
        - GitHubRepository
        - Branch
        - GitHubWebhookSecret
    - Label:
        default: Build
      Parameters:
        - LambdaConfiguration
        - BuildSpec
        - InputTemplate
        - OutputTemplate
        - KmsKeyAdmin
        - CodeBuildEnvironment

Conditions:

  WebhookEnabled: !Not [ !Equals [ !Ref GitHubWebhookSecret, "" ] ]

  UseKms: !Not [ !Equals [ !Ref KmsKeyAdmin, "" ] ]

Resources:

  AppCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref AWS::StackName
      Description: Builds the project
      ServiceRole: !Ref CodeBuildServiceRole
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: !Ref CodeBuildEnvironment
        Image: 'aws/codebuild/standard:2.0'
        EnvironmentVariables:
          - Name: INPUT_TEMPLATE
            Value: !Ref InputTemplate
          - Name: BUCKET_NAME
            Value: !Ref FunctionsS3Bucket
          - Name: KMS_KEY_ID
            Value: !If [ UseKms, !Ref KmsKey, '' ]
          - Name: LAMBDA_CONF
            Value: !Ref LambdaConfiguration
      Source:
        BuildSpec: !Ref BuildSpec
        Type: CODEPIPELINE
      TimeoutInMinutes: 30

  AppPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      Stages:
        - Name: Source
          Actions:
            - InputArtifacts: []
              Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: '1'
                Provider: GitHub
              OutputArtifacts:
                - Name: MyApp
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepository
                PollForSourceChanges: !If [ WebhookEnabled, false, true ]
                Branch: !Ref Branch
                # Reads the token from Secrets Manager
                OAuthToken: '{{resolve:secretsmanager:dev/github/token:SecretString:GitHubAccessToken}}'
              RunOrder: 1
        - Name: Build
          Actions:
            - InputArtifacts:
                - Name: MyApp
              Name: CodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref AppCodeBuild
              OutputArtifacts:
                - Name: MyAppBuild
              RunOrder: 1
        - Name: Staging
          Actions:
            - InputArtifacts:
                - Name: MyAppBuild
              Name: MyChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              OutputArtifacts: []
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                ChangeSetName: MyChangeSet
                StackName: !Sub ${AWS::StackName}-lambda
                Capabilities: CAPABILITY_IAM
                RoleArn: !GetAtt CloudFormationLambdaExecutionRole.Arn
                TemplatePath: !Join ['::', [ MyAppBuild, !Ref OutputTemplate]]
                TemplateConfiguration: !Join ['::', [ MyAppBuild, !Ref LambdaConfiguration]]
              RunOrder: 1
        - Name: Deploy
          Actions:
            - InputArtifacts:
              - Name: MyAppBuild
              Name: MyChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              OutputArtifacts: []
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: MyChangeSet
                StackName: !Sub ${AWS::StackName}-lambda
              RunOrder: 1
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactStoreS3Bucket

  Webhook:
    Type: AWS::CodePipeline::Webhook
    Condition: WebhookEnabled
    Properties:
      Name: CodePipelineGitHubWebhook
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubWebhookSecret
      Filters:
        - JsonPath: '$.ref'
          MatchEquals: refs/heads/{Branch}
      Authentication: GITHUB_HMAC
      TargetPipeline: !Ref AppPipeline
      TargetAction: Source
      TargetPipelineVersion: !GetAtt AppPipeline.Version
      RegisterWithThirdParty: true

  ArtifactStoreS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain

  FunctionsS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess'
        - 'arn:aws:iam::aws:policy/AWSCodePipelineFullAccess'
        - 'arn:aws:iam::aws:policy/AWSElasticBeanstalkFullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'

  CloudFormationLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudFormationPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:CreateChangeSet
                Resource: 'arn:aws:cloudformation:*:aws:transform/Serverless-2016-10-31'
              - Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:PutRolePolicy
                  - iam:AttachRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:DetachRolePolicy
                Resource: 'arn:aws:iam::*:role/*'
              - Effect: Allow
                Action:
                  - apigateway:*
                Resource: 'arn:aws:apigateway:*::*'
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: '*'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AWSCodePipelineFullAccess'
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
        - 'arn:aws:iam::aws:policy/AWSLambdaFullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'

  KmsKey:
    Type: AWS::KMS::Key
    Condition: UseKms
    Properties:
      Description: 'KMS key for S3 encryption'
      KeyPolicy:
        Version: '2012-10-17'
        Id: 'dev/lambda-s3-key'
        Statement:
          - Sid: 'Allow administration of the key'
            Effect: Allow
            Principal:
              AWS: !Ref KmsKeyAdmin
            Action:
              - 'kms:Create*'
              - 'kms:Describe*'
              - 'kms:Enable*'
              - 'kms:List*'
              - 'kms:Put*'
              - 'kms:Update*'
              - 'kms:Revoke*'
              - 'kms:Disable*'
              - 'kms:Get*'
              - 'kms:Delete*'
              - 'kms:ScheduleKeyDeletion'
              - 'kms:CancelKeyDeletion'
            Resource: '*'
          - Sid: 'Allow use of the key'
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt CodeBuildServiceRole.Arn
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:DescribeKey'
            Resource: '*'
